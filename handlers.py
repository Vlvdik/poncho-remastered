import methods
import db_methods
import random
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from datetime import datetime
from config import *

### –ù–∞–ª–∞–∂–∏–≤–∞–µ–º –æ–±—â–µ–Ω–∏–µ —Å –í–ö

authorize = vk_api.VkApi(token = main_token)
longpoll = VkBotLongPoll(authorize, group_id)
upload = vk_api.VkUpload(authorize)
start_keyboard = VkKeyboard(one_time=False)
form_keyboard = VkKeyboard(one_time=False)
back_keyboard = VkKeyboard(one_time=False)
schedule_keyboard = VkKeyboard(one_time=False)
days_keyboard = VkKeyboard(one_time=False)

### –ö–∞—Å—Ç–æ–º–∏–º –∫–ª–∞–≤—ã

start_keyboard.add_button('–ù–ê–ß–ê–¢–¨', color=VkKeyboardColor.PRIMARY)

form_keyboard.add_button('–û–ß–ù–ê–Ø', color=VkKeyboardColor.POSITIVE)
form_keyboard.add_line()
form_keyboard.add_button('–û–ß–ù–û-–ó–ê–û–ß–ù–ê–Ø', color=VkKeyboardColor.PRIMARY)
form_keyboard.add_line()
form_keyboard.add_button('–ó–ê–û–ß–ù–ê–Ø', color=VkKeyboardColor.NEGATIVE)

back_keyboard.add_button('–ù–ê–ó–ê–î', color=VkKeyboardColor.NEGATIVE)

schedule_keyboard.add_button('–°–ú–ï–ù–ò–¢–¨ –ì–†–£–ü–ü–£', color=VkKeyboardColor.NEGATIVE)
schedule_keyboard.add_button('–ù–ï–î–ï–õ–Ø', color=VkKeyboardColor.POSITIVE)
schedule_keyboard.add_button('–î–ï–ù–¨', color=VkKeyboardColor.POSITIVE)
schedule_keyboard.add_line()
schedule_keyboard.add_button('–°–ï–ì–û–î–ù–Ø', color=VkKeyboardColor.PRIMARY)

days_keyboard.add_button('–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', color=VkKeyboardColor.POSITIVE)
days_keyboard.add_button('–í–¢–û–†–ù–ò–ö', color=VkKeyboardColor.POSITIVE)
days_keyboard.add_button('–°–†–ï–î–ê', color=VkKeyboardColor.POSITIVE)
days_keyboard.add_line()
days_keyboard.add_button('–ß–ï–¢–í–ï–†–ì', color=VkKeyboardColor.POSITIVE)
days_keyboard.add_button('–ü–Ø–¢–ù–ò–¶–ê', color=VkKeyboardColor.POSITIVE)
days_keyboard.add_button('–°–£–ë–ë–û–¢–ê', color=VkKeyboardColor.POSITIVE)
days_keyboard.add_line()
days_keyboard.add_button('–í–û–°–ö–†–ï–°–ï–ù–¨–ï', color=VkKeyboardColor.SECONDARY)
days_keyboard.add_button('–í–´–ë–û–† –†–ê–°–ü–ò–°–ê–ù–ò–Ø', color=VkKeyboardColor.NEGATIVE)

### –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –í–ö
async def write_msg(user_id, message, keyboard=None):
    msg = {'user_id': user_id, 'message': message, 'random_id': 0}

    if keyboard != None:
        msg['keyboard'] = keyboard.get_keyboard()

    authorize.method('messages.send', msg)

async def write_chat_msg(chat_id, message):
    authorize.method('messages.send', {'chat_id': chat_id, 'message': message, 'random_id': 0})

async def send_picture(chat_id, message, attachment):
    authorize.method('messages.send', {'chat_id': chat_id, 'message': message, 'attachment': attachment, 'random_id': 0})

async def kick_user(chat_id, member_id):
    authorize.method('messages.removeChatUser', {'chat_id' : chat_id, 'member_id' : member_id})

async def get_conversation_info(chat_id):
    return authorize.method('messages.getConversationMembers', {'peer_id': 2000000000 + chat_id, 'group_id': group_id})['items']

### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ª–∏—á–∫–∏
async def start(user_id, value='–ü—Ä–∏–≤–µ—Ç, –Ø –ü–æ–Ω—á–æ, —Ç–≤–æ–π –ø—É—à–∏—Å—Ç—ã–π –ø–æ–º–æ—à–Ω–∏–∫, —Å–≤–æ–∏–º–∏ –ª–∞–ø–∞–º–∏ –∏—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–øüêà'):
    await db_methods.insert_user(user_id)
    await write_msg(user_id, value + '\n–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–µ–π —Ñ–æ—Ä–º–æ–π –æ–±—É—á–µ–Ω–∏—è:', form_keyboard)
    
async def undefiend_command(user_id):
    if await db_methods.is_existing_user(user_id):
        await db_methods.delete_user(user_id)
    await start(user_id, '–ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ —è –µ–µ –Ω–µ –ø–æ–Ω—è–ªüòø')

async def set_form(user_id, form):  
    await db_methods.insert_form(user_id, form)
    await write_msg(user_id, '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É \n–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—éüò∏', back_keyboard)

async def set_group(user_id, group):
    if await methods.is_group(user_id, group):
        await db_methods.insert_group(user_id, group)
        await write_msg(user_id, '–ì—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Å—É–ø–µ—Ä! \nüí• –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, –º—Ä—Ä', schedule_keyboard)
    else:
        await write_msg(user_id, '–°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –≥—Ä—É–ø–ø—É üë∫')

async def back(user_id):
    await db_methods.delete_user(user_id)   
    await start(user_id, '–û–∫–µ–π, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π üëåüèª\n')

async def push_button(user_id, msg):
    if msg in day_of_weeks:
        group = await db_methods.get_user_link(user_id)

        await write_msg(user_id, await methods.parse_schedule('https://ies.unitech-mo.ru/schedule_list_groups?' + group[51:], await db_methods.get_user_link(user_id), msg), days_keyboard)
    elif msg  == '—Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É':
        await back(user_id)
    elif msg  == '–Ω–µ–¥–µ–ª—è':
        group = await db_methods.get_user_link(user_id)

        await write_msg(user_id, await methods.parse_schedule('https://ies.unitech-mo.ru/schedule_list_groups?' + group[51:], await db_methods.get_user_link(user_id)))
    elif msg  == '–¥–µ–Ω—å':
        await write_msg(user_id, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å. \nP.S. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞ –¢–ï–ö–£–©–£–Æ –Ω–µ–¥–µ–ª—é ‚ùó', days_keyboard) 
    elif msg == '–≤—ã–±–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è':
        await write_msg(user_id, 'üëåüèª', schedule_keyboard)
    elif msg  == '—Å–µ–≥–æ–¥–Ω—è':
        group = await db_methods.get_user_link(user_id)

        await write_msg(user_id, await methods.parse_schedule('https://ies.unitech-mo.ru/schedule_list_groups?' + group[51:], await db_methods.get_user_link(user_id), day_of_weeks[datetime.now().weekday()]))
    else:
        await write_msg(user_id, '–ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ —è –µ–µ –Ω–µ –ø–æ–Ω—è–ªüòø')

###–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞

async def help(chat_id):
    await write_chat_msg(chat_id, helper)

async def chat_greeting(chat_id):
    await write_chat_msg(chat_id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –∫–æ–∂–∞–Ω–Ω—ã–µ\nüêàüêàüêàüêàüêàüêà\n–Ø –ü–æ–Ω—á–æ, –±—É–¥—É –≤–∞—à–∏–º –ø–æ–º–æ—à–Ω–∏–∫–æ–º, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ, –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ :3\n\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –Ω–∞–ø–∏—à–∏ /help")

async def user_greeting(chat_id, member_id):
    await write_chat_msg(chat_id, f"@id{member_id} (–ö–æ–∂–∞–Ω–Ω—ã–π), –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∫–∞–∫–∏–º–∏ —Å—É–¥—å–±–∞–º–∏?\n–î–∞ –∏ –≤–æ–æ–±—â–µ, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")

async def leave_user(chat_id, member_id):
    await write_chat_msg(chat_id, f"@id{member_id} (–ö–æ–∂–∞–Ω–Ω—ã–π) –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –∏ —Å–≤–∞–ª–∏–ª")

async def kick(chat_id, user_id, member_id):
    await write_chat_msg(chat_id, f"@id{user_id} (–ö—ç–ø) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –¥–∞–ª–µ–∫–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ @id{member_id} (—ç—Ç–æ–≥–æ –º–æ—Ä—è—á–∫–∞)\nPress Füòø")

async def bibametr(chat_id, user_id):
    res = random.randint(-100,100)
    smile = ''

    if res >= 30:
        smile = 'üôÄ'
    else:
        smile = 'üòø'

    await write_chat_msg(chat_id, f'@id{user_id} (–ß–µ–ª), –±–∏–±–∞ {res} —Å–º {smile}')

async def roulette(chat_id, user_id):
    try:
        if random.randint(0,5):
            await write_chat_msg(chat_id, '–í–°–ï –•–û–†–û–®–û üëç')
        else:
            await write_chat_msg(chat_id, '–ê–•–ê–•–ê–•–ê–•–ê–•–ê, –ö–õ–ê–°–°–ò–ö üî´')
            await kick_user(chat_id, user_id)
    except:
        await write_chat_msg(chat_id, f'@id{user_id} (–ê–¥–º–∏–Ω), —ç—Ç–æ —à—É—Ç–∫–∞, —è –Ω–∏–∫–æ–≥–¥–∞ –±—ã –Ω–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ –∫–æ—Ä–º–∏–ª—å—Ü–∞ :3')

### –†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ñ–æ–π —á–∞—Ç–∞

async def refresh_chats_info(chat_id, user_id, msg):
    score = await methods.toxicity_handler(msg)

    if await db_methods.is_user_exist_in_current_chat(user_id, chat_id):
        if await db_methods.get_user_chat_score_info(user_id, chat_id) < CHAT_LOW_HYPER_PARAMETER:
            pass
        else:
            await db_methods.update_chat_user_score(user_id, chat_id, score)
    else:
        await db_methods.insert_chat_user_score(user_id, chat_id, score)

async def set_chat_limit(chat_id, user_id, words):
    if len(words) > 1:
        try:
            conversation_info = await get_conversation_info(chat_id)

            for user in conversation_info:
                if user['member_id'] == user_id:
                    try:
                        if user['is_admin']: 
                            try:
                                if float(words[1]) == 0.0:
                                    await db_methods.delete_chats_limit(chat_id)
                                    await write_chat_msg(chat_id, '–õ–∏–º–∏—Ç —É–±—Ä–∞–Ω üëåüèª')
                                    break
                                else:
                                    if await db_methods.is_chat_have_limit(chat_id):
                                        await db_methods.update_chats_limit(chat_id, float(words[1]))
                                    else:
                                        await db_methods.insert_chats_limit(chat_id, float(words[1])) 
                                    await write_chat_msg(chat_id, '–ó–∞–¥–∞–Ω–æ üëåüèª')
                                    break
                            except:
                                await write_chat_msg(chat_id, '–ó–∞–¥–∞–Ω –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç üë∫')

                    except:
                        await write_chat_msg(chat_id, '–õ–∏–º–∏—Ç –º–æ–≥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–µ—Å–µ–¥—ã üë∫')
        except:
            await write_chat_msg(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏...')
    else:
        await write_chat_msg(chat_id, '–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ üë∫')

async def get_chat_info(chat_id):
    if await db_methods.is_existed_chat(chat_id):
        result = ''
        number = 1
        current_chat = await db_methods.get_score_info(chat_id)

        for user in current_chat:
            user_id = str(user[0])
            result += f'üë≤üèΩ @id{user_id} (–ë—ã–¥–ª–æ ‚Ññ{number})\n'
            number += 1
        if result != '':
            await write_chat_msg(chat_id, '‚ùó–†–ï–ô–¢–ò–ù–ì –¢–û–ö–°–ò–ß–ù–û–°–¢–ò –í –≠–¢–û–ú –ß–ê–¢–ï‚ùó\n\n' + result)
        else:
            await write_chat_msg(chat_id,  '–í —á–∞—Ç–µ –Ω–µ—Ç —Ç–æ–∫—Å–∏–∫–æ–≤ üëç')
    else:
        await write_chat_msg(chat_id, '–ò–Ω—Ñ—ã –æ —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç üòø')

async def check_chat_limit(chat_id, user_id):   
    if await db_methods.is_existed_chat(chat_id):
        if await db_methods.get_user_chat_score_info(user_id, chat_id) > await db_methods.get_chat_limit(chat_id):        
            await db_methods.delete_user_from_chat(user_id, chat_id)
            await kick_user(chat_id, user_id)
            await write_chat_msg(chat_id, '–û–°–£–ñ–î–ê–Æ')

### –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏

async def horoscope(chat_id, words):
    try:
        if words[1] in zodiac_signs:
            photo = upload.photo_messages('Your path to img')
            attachment = "photo" + str(photo[0]['owner_id']) + "_" + str(photo[0]['id']) + "_" + str(photo[0]['access_key'])
            if len(words) > 2:
                await send_picture(chat_id, await methods.get_horoscope(words[1], words[2]), attachment)
            else:
                await send_picture(chat_id, await methods.get_horoscope(words[1]), attachment)
        else:
            await write_chat_msg(chat_id, '–ú–æ–∏–º–∏ –ª–∞–ø–∞–º–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–¥–æ–±–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üòø') 
    except:
        await write_chat_msg(chat_id, '–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üë∫')

async def schedule(chat_id, words):
    try:
        await write_chat_msg(chat_id, await methods.get_schedule(words))
    except:
        await write_chat_msg(chat_id, '–£–∫–∞–∂–∏—Ç–µ –ö–£–†–° –∏ –ì–†–£–ü–ü–£!')
