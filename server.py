import asyncio
import vk_api
import methods
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from config import *

authorize = vk_api.VkApi(token = main_token)
upload = vk_api.VkUpload(authorize)
longpoll = VkBotLongPoll(authorize, group_id)
log = methods.event_logs

### –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –í–ö
async def write_msg(chat_id, message):
    authorize.method('messages.send', {'chat_id': chat_id, 'message': message, 'random_id': 0})

async def send_picture(chat_id, message, attachment):
    authorize.method('messages.send', {'chat_id': chat_id, 'message': message, 'attachment': attachment, 'random_id': 0})

async def kick_user(chat_id, member_id):
    authorize.method('messages.removeChatUser', {'chat_id' : chat_id, 'user_id' : member_id})

### –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –ª—É–ø
async def main():
    for event in longpoll.listen():
        try:
            print(event)
            await event_handle(event)
        except:
            methods.event_logs('Server_error', 'breaks in the program logic')

### –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—É—Ç, –≤ —Ç–æ–º —á–∏—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≤–µ–Ω—Ç–æ–≤
async def event_handle(event):
    try:

        ### –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        msg = event.message.get('text').lower()
        words = event.message.get('text').lower().split()
        chat_id = event.chat_id
        user_id = event.message.get('from_id')    

        if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat and event.message.get('text') != "":
            
            await log('New_message', msg, user_id)

            if msg == '/help':
                await write_msg(chat_id, helper)

            if msg == '/bibametr':
                await write_msg(chat_id, methods.bibametr(user_id))

            if msg == '/–±—ã–¥–ª–æ' and chats_info:
                await write_msg(chat_id, methods.get_chat_info(chat_id))

            if msg == '/—Ä—É–ª–µ—Ç–∫–∞':
                try:
                    if methods.shoot():
                        await write_msg(chat_id, '–í–°–ï –•–û–†–û–®–ûüëç')
                    else:
                        await write_msg(chat_id, '–ê–•–ê–•–ê–•–ê–•–ê–•–ê, –ö–õ–ê–°–°–ò–öüî´')
                        await kick_user(chat_id, user_id)
                except:
                    await write_msg(chat_id, f'@id{user_id} (–ê–¥–º–∏–Ω), —ç—Ç–æ —à—É—Ç–∫–∞, —è –Ω–∏–∫–æ–≥–¥–∞ –±—ã –Ω–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ –∫–æ—Ä–º–∏–ª—å—Ü–∞ :3')

            if msg == '/–≥–æ—Ä–æ—Å–∫–æ–ø':
                await write_msg(chat_id, '–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üë∫')
            elif words[0] == '/–≥–æ—Ä–æ—Å–∫–æ–ø':
                if words[1] in zodiac_signs:
                    photo = upload.photo_messages('uploads/–ö–æ—Ç_' + words[1] + '.jpg')
                    attachment = "photo" + str(photo[0]['owner_id']) + "_" + str(photo[0]['id']) + "_" + str(photo[0]['access_key'])
                    await send_picture(chat_id, methods.parse_horoscope(words[1]), attachment)
                else:
                    await write_msg(chat_id, '–ú–æ–∏–º–∏ –ª–∞–ø–∞–º–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–¥–æ–±–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üòø') 

            if words[0] == '/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                if msg == words[0] or len(words) == 2:
                    await write_msg(chat_id, '–£–∫–∞–∂–∏—Ç–µ –ö–£–†–° –∏ –ì–†–£–ü–ü–£!')
                elif len(words) > 3:
                    await write_msg(chat_id, methods.parse_schedule(words[1], words[2], words[3]))
                else:
                    await write_msg(chat_id, methods.parse_schedule(words[1], words[2]))

            if len(words) > 1 and msg[0] != '/':
                methods.refresh_chats_info(chat_id, user_id, msg)

    
        elif event.type == VkBotEventType.MESSAGE_NEW and (event.message.action.get('type') == 'chat_invite_user' or event.message.action.get('type') == 'chat_invite_user_by_link'):
            member_id = event.message.action.get('member_id')
            if member_id == bot_id:
                await log('New_chat', chat_id)
                await write_msg(chat_id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –∫–æ–∂–∞–Ω–Ω—ã–µ\n–Ø –ü–æ–Ω—á–æ, –±—É–¥—É –≤–∞—à–∏–º –ø–æ–º–æ—à–Ω–∏–∫–æ–º. –ù–æ –¥–ª—è —ç—Ç–æ–≥–æ, –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ :3")
            else:
                await log('New_user', member_id)
                await write_msg(chat_id, f"@id{member_id} (–ö–æ–∂–∞–Ω–Ω—ã–π), –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∫–∞–∫–∏–º–∏ —Å—É–¥—å–±–∞–º–∏?\n–î–∞ –∏ –≤–æ–æ–±—â–µ, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")
    
        elif event.type == VkBotEventType.MESSAGE_NEW and event.message.action.get('type') == 'chat_kick_user':
            member_id = event.message.action.get('member_id')
            
            if user_id == member_id:
                await log('Leave_user', member_id)
                await write_msg(chat_id, f"@id{member_id} (–ß–µ–ª) –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –∏ —Å–≤–∞–ª–∏–ª")
            else:    
                await log('Kick_user', member_id)
                await write_msg(chat_id, f"@id{user_id} (–ß–µ–ª–æ–≤–µ–∫) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –¥–∞–ª–µ–∫–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ @id{member_id} (—á–µ–ª–æ–≤–µ–∫–∞)\nPress F")
    except:
        await methods.event_logs('Handle_error', 'undefiend event')

asyncio.run(main())
